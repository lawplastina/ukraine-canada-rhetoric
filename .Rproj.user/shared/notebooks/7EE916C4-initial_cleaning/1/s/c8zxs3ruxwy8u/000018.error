{"frames":[{"func":"as.data.frame(us_transcripts_unfiltered) %>% mutate(type = str_extract(title, \n    \"^[^:]+\"), title = str_trim(str_remove(title, \"^[^:]+:\\\\s*\")), \n    transcript = if_else(str_starts(title, \"No Transcript -\"), \n        \"No\", \"Yes\"), title = str_remove(title, \"^No Transcript -\\\\s*\"),  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"select(., -date)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(., date_parsed <= as.Date(\"2025-06-01\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"drop_na(., date_parsed)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate(., type = str_extract(title, \"^[^:]+\"), title = str_trim(str_remove(title, \n    \"^[^:]+:\\\\s*\")), transcript = if_else(str_starts(title, \"No Transcript -\"), \n    \"No\", \"Yes\"), title = str_remove(title, \"^No Transcript -\\\\s*\"), \n    date_parsed = ymd(date), trump_only = na_if(trump_only, \"\"),  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate.data.frame(., type = str_extract(title, \"^[^:]+\"), title = str_trim(str_remove(title, \n    \"^[^:]+:\\\\s*\")), transcript = if_else(str_starts(title, \"No Transcript -\"), \n    \"No\", \"Yes\"), title = str_remove(title, \"^No Transcript -\\\\s*\"), \n    date_parsed = ymd(date), trump_only = na_if(trump_only, \"\"),  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_cols(.data, dplyr_quosures(...), by)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers(for (i in seq_along(dots)) {\n    poke_error_context(dots, i, mask = mask)\n    context_poke(\"column\", old_current_column)\n    new_columns <- mutate_col(dots[[i]], data, mask, new_columns) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_col(dots[[i]], data, mask, new_columns)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mask$eval_all_mutate(quo)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval()","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"str_extract(title, \"^[^:]+\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"check_lengths(string, pattern)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"vctrs::vec_size_common(string = string, pattern = pattern, replacement = replacement, \n    .call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_scalar_type(.Primitive(\"quote\")(function (main = NULL, sub = NULL, \n    xlab = NULL, ylab = NULL, line = NA, outer = FALSE, ...) \n{\n    main <- as.graphicsAnnot(main) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop_vctrs(msg, \"vctrs_error_scalar_type\", actual = x, call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(message, class = c(class, \"vctrs_error\"), ..., call = call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signalCondition(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (cnd) \n{\n    local_error_context(dots, i = frame[[i_sym]], mask = mask)\n    if (inherits(cnd, \"dplyr:::internal_error\")) { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(message, class = error_class, parent = parent, call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in mutate(., type = str_extract(title, \"^[^:]+\"), title = str_trim(str_remove(title,  : \n  \n\u001B[1mCaused by error in `str_extract()`:\u001B[22m\n\u001B[33m!\u001B[39m `string` must be a vector, not a function.\n"}